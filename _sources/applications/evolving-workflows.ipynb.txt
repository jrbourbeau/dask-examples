{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Handle Evolving Workflows\n",
    "=========================\n",
    "\n",
    "For some workflows we don't know the extent of the computation at the outset.  We need to do some computation in order to figure out the rest of the computation that we need to do.  The computation grows and evolves as we do more work.\n",
    "\n",
    "As an example, consider a situation where you need to read many files and then based on the contents of those files, fire off additional work.  You would like to read the files in parallel, and then within each file expose more parallelism.\n",
    "\n",
    "This example goes through three ways to handle this situation using [Dask Futures](https://docs.dask.org/en/latest/futures.html)\n",
    "\n",
    "1.  Using `as_completed`\n",
    "2.  Using `async/await`\n",
    "3.  Launching tasks from tasks\n",
    "\n",
    "But first, lets run our code sequentially."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0: Sequential code\n",
    "------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:06.541207Z",
     "iopub.status.busy": "2021-01-27T16:16:06.540643Z",
     "iopub.status.idle": "2021-01-27T16:16:06.550908Z",
     "shell.execute_reply": "2021-01-27T16:16:06.551610Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['file.0.txt', 'file.1.txt', 'file.2.txt']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filenames = [\"file.{}.txt\".format(i) for i in range(10)]\n",
    "\n",
    "filenames[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:06.554466Z",
     "iopub.status.busy": "2021-01-27T16:16:06.553533Z",
     "iopub.status.idle": "2021-01-27T16:16:06.562835Z",
     "shell.execute_reply": "2021-01-27T16:16:06.563505Z"
    }
   },
   "outputs": [],
   "source": [
    "import random, time\n",
    "\n",
    "\n",
    "def parse_file(fn: str) -> list:\n",
    "    \"\"\" Returns a list work items of unknown length \"\"\"\n",
    "    time.sleep(random.random())\n",
    "    return [random.random() for _ in range(random.randint(1, 10))]\n",
    "\n",
    "def process_item(x: float):\n",
    "    \"\"\" Process each work item \"\"\"\n",
    "    time.sleep(random.random() / 4)\n",
    "    return x + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:06.566748Z",
     "iopub.status.busy": "2021-01-27T16:16:06.565538Z",
     "iopub.status.idle": "2021-01-27T16:16:20.231047Z",
     "shell.execute_reply": "2021-01-27T16:16:20.230627Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4.37 ms, sys: 668 Âµs, total: 5.03 ms\n",
      "Wall time: 13.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# This takes around 10-20s\n",
    "\n",
    "results = []\n",
    "\n",
    "for fn in filenames:\n",
    "    L = parse_file(fn)\n",
    "    for x in L:\n",
    "        out = process_item(x)\n",
    "        results.append(out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Start Dask Client\n",
    "-----------------\n",
    "\n",
    "We'll need a Dask client in order to manage dynamic workloads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:20.244020Z",
     "iopub.status.busy": "2021-01-27T16:16:20.243543Z",
     "iopub.status.idle": "2021-01-27T16:16:22.638560Z",
     "shell.execute_reply": "2021-01-27T16:16:22.637427Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>inproc://10.1.0.4/7612/1</li>\n",
       "  <li><b>Dashboard: </b><a href='http://10.1.0.4:8787/status' target='_blank'>http://10.1.0.4:8787/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>1</li>\n",
       "  <li><b>Cores: </b>6</li>\n",
       "  <li><b>Memory: </b>7.29 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'inproc://10.1.0.4/7612/1' processes=1 threads=6, memory=7.29 GB>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client\n",
    "\n",
    "client = Client(processes=False, n_workers=1, threads_per_worker=6)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1: Use as_completed\n",
    "-------------------\n",
    "\n",
    "The [as_completed](https://docs.dask.org/en/latest/futures.html#distributed.as_completed) iterator lets us handle futures as they complete.  We can then submit more data on the fly.\n",
    "\n",
    "-   We submit a task for each of our filenames\n",
    "-   We also compute the length of each of the returned lists\n",
    "-   As those lengths return, we submit off a new task to get each item of that list.  We do this at higher priority, so that we process existing data before we collect new data.\n",
    "-   We wait on all of the returned results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:22.643471Z",
     "iopub.status.busy": "2021-01-27T16:16:22.643008Z",
     "iopub.status.idle": "2021-01-27T16:16:24.942416Z",
     "shell.execute_reply": "2021-01-27T16:16:24.942036Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 279 ms, sys: 15.8 ms, total: 295 ms\n",
      "Wall time: 2.29 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.6408141464097064,\n",
       " 1.769424768671146,\n",
       " 1.9378567629768635,\n",
       " 1.4650335727990513,\n",
       " 1.8824065165131387,\n",
       " 1.7829365319603308,\n",
       " 1.2344454366032487,\n",
       " 1.5485120232381808,\n",
       " 1.7841997989682876,\n",
       " 1.989308959491595,\n",
       " 1.8530056462007507,\n",
       " 1.7599532075279507,\n",
       " 1.5499626833150635,\n",
       " 1.3317196813807302,\n",
       " 1.9482902103385238,\n",
       " 1.3173361892999342,\n",
       " 1.315034767676297,\n",
       " 1.2323896472139828,\n",
       " 1.079142830440663,\n",
       " 1.7820589354515788,\n",
       " 1.6522424639993474,\n",
       " 1.2472176511852422,\n",
       " 1.9879056717798913,\n",
       " 1.836345866401777,\n",
       " 1.1031364397412893,\n",
       " 1.667327885958536,\n",
       " 1.5687889651086073,\n",
       " 1.887726397815149,\n",
       " 1.214771176841841,\n",
       " 1.5488577052889259,\n",
       " 1.516566036025409,\n",
       " 1.3872412889917156,\n",
       " 1.939533189565965,\n",
       " 1.5865850367916305,\n",
       " 1.2235092266830936,\n",
       " 1.6978729358097597,\n",
       " 1.0469938404189008,\n",
       " 1.1283280730672431,\n",
       " 1.5449254718888756,\n",
       " 1.9755802337845576,\n",
       " 1.388375073191901,\n",
       " 1.8970226956313723,\n",
       " 1.3359912806911383,\n",
       " 1.8467914549065276,\n",
       " 1.1638011127459658,\n",
       " 1.7848805698801389,\n",
       " 1.965613745835093,\n",
       " 1.7020374000744791,\n",
       " 1.5964724080645527,\n",
       " 1.1894167212081113,\n",
       " 1.94265595091664,\n",
       " 1.4436551942123352,\n",
       " 1.6982493318491403,\n",
       " 1.1410607855024284,\n",
       " 1.0279512190417295,\n",
       " 1.2018939712532721,\n",
       " 1.8251617512776361,\n",
       " 1.0077854357013964,\n",
       " 1.5658437068936957,\n",
       " 1.1764324304993017,\n",
       " 1.7692151687206168,\n",
       " 1.6633349768188312,\n",
       " 1.3885762497006353,\n",
       " 1.9016521861145823,\n",
       " 1.5084837343915332,\n",
       " 1.1500326182057017,\n",
       " 1.5258125897897494,\n",
       " 1.0071024511320843,\n",
       " 1.6903200325721297,\n",
       " 1.160736341684916]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "from dask.distributed import as_completed\n",
    "import operator\n",
    "\n",
    "lists = client.map(parse_file, filenames, pure=False)\n",
    "lengths = client.map(len, lists)\n",
    "\n",
    "mapping = dict(zip(lengths, lists))\n",
    "\n",
    "futures = []\n",
    "\n",
    "for future in as_completed(lengths):\n",
    "    n = future.result()\n",
    "    L = mapping[future]\n",
    "    for i in range(n):\n",
    "        new = client.submit(operator.getitem, L, i, priority=1)\n",
    "        new = client.submit(process_item, new, priority=1)\n",
    "        futures.append(new)\n",
    "        \n",
    "client.gather(futures)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2: Use async/await to handle single file processing locally\n",
    "-----------------------------------------------------------\n",
    "\n",
    "We can also handle the concurrency here within our local process.  This requires you to understand async/await syntax, but is generally powerful and arguably simpler than the `as_completed` approach above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:24.944912Z",
     "iopub.status.busy": "2021-01-27T16:16:24.944424Z",
     "iopub.status.idle": "2021-01-27T16:16:24.955135Z",
     "shell.execute_reply": "2021-01-27T16:16:24.955539Z"
    }
   },
   "outputs": [],
   "source": [
    "import asyncio\n",
    "\n",
    "async def f(fn):\n",
    "    \"\"\" Handle the lifecycle of a single file \"\"\"\n",
    "    future = client.submit(parse_file, fn, pure=False)\n",
    "    length_future = client.submit(len, future)\n",
    "    length = await length_future\n",
    "    \n",
    "    futures = [client.submit(operator.getitem, future, i, priority=10) \n",
    "               for i in range(length)]\n",
    "    futures = client.map(process_item, futures, priority=10)\n",
    "    return futures\n",
    "\n",
    "async def run_all(filenames):\n",
    "    list_of_list_of_futures = await asyncio.gather(*[f(fn) for fn in filenames])\n",
    "    futures = sum(list_of_list_of_futures, [])\n",
    "    return await client.gather(futures)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now need to run this function in the same event loop as our client is running.  If we had started our client asynchronously, then we could have done this:\n",
    "\n",
    "```python\n",
    "client = await Client(asynchronous=True)\n",
    "\n",
    "await run_all(filenames)\n",
    "```\n",
    "\n",
    "However, because we started our client without the `asynchronous=True` flag the event loop is actually running in a separate thread, so we'll have to ask the client to run this for us."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:24.958125Z",
     "iopub.status.busy": "2021-01-27T16:16:24.957560Z",
     "iopub.status.idle": "2021-01-27T16:16:27.223716Z",
     "shell.execute_reply": "2021-01-27T16:16:27.223297Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.908142248332966,\n",
       " 1.1369870531082809,\n",
       " 1.66838297549333,\n",
       " 1.178929176129981,\n",
       " 1.0484648350852064,\n",
       " 1.9014409116851125,\n",
       " 1.945069205479884,\n",
       " 1.6982667489139147,\n",
       " 1.3075243046660479,\n",
       " 1.4066560074041883,\n",
       " 1.6277312264413017,\n",
       " 1.0141164097160797,\n",
       " 1.837273626855097,\n",
       " 1.8555540972205264,\n",
       " 1.2322907780074739,\n",
       " 1.4012707979415047,\n",
       " 1.9024480283805003,\n",
       " 1.0037167432399956,\n",
       " 1.4412852164382275,\n",
       " 1.721280221561668,\n",
       " 1.7021386254561999,\n",
       " 1.253490738844739,\n",
       " 1.5253527081299498,\n",
       " 1.1175030329615268,\n",
       " 1.4740813362824705,\n",
       " 1.626120806896337,\n",
       " 1.3960272696794869,\n",
       " 1.3770989300352625,\n",
       " 1.9827829952892897,\n",
       " 1.9036717707063486,\n",
       " 1.5562983750122186,\n",
       " 1.1726812995075004,\n",
       " 1.4939178939141122,\n",
       " 1.3516958516805988,\n",
       " 1.638596201426845,\n",
       " 1.0607659619789636,\n",
       " 1.213346415747526,\n",
       " 1.7311303803583415,\n",
       " 1.6184184281872804,\n",
       " 1.9266201579757212,\n",
       " 1.036799155539557,\n",
       " 1.0075311847844355,\n",
       " 1.8637086523506259,\n",
       " 1.8457385023540456,\n",
       " 1.238080070927448,\n",
       " 1.9593506721834277,\n",
       " 1.6503731054811805,\n",
       " 1.7862656694514436,\n",
       " 1.6558060212530712,\n",
       " 1.6228137711757695,\n",
       " 1.9690754946211988,\n",
       " 1.587836524747708,\n",
       " 1.734960777364675,\n",
       " 1.9567011916745505,\n",
       " 1.9121241969454386,\n",
       " 1.1016217915275375,\n",
       " 1.3704884824779844]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "client.sync(run_all, filenames)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3: Submit tasks from tasks\n",
    "--------------------------\n",
    "\n",
    "We can also submit tasks that themselves submit more tasks.  See [documentation here](https://docs.dask.org/en/latest/futures.html#submit-tasks-from-tasks)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-27T16:16:27.232582Z",
     "iopub.status.busy": "2021-01-27T16:16:27.230130Z",
     "iopub.status.idle": "2021-01-27T16:16:29.927277Z",
     "shell.execute_reply": "2021-01-27T16:16:29.926834Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 208 ms, sys: 11.2 ms, total: 219 ms\n",
      "Wall time: 2.69 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "from dask.distributed import get_client, secede, rejoin\n",
    "\n",
    "def f(fn):\n",
    "    L = parse_file(fn)\n",
    "    client = get_client()\n",
    "    \n",
    "    futures = client.map(process_item, L, priority=10)\n",
    "    secede()\n",
    "    results = client.gather(futures)\n",
    "    rejoin()\n",
    "    return results\n",
    "\n",
    "futures = client.map(f, filenames, pure=False)\n",
    "results = client.gather(futures)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
